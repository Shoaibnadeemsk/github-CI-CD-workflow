name: EC2 Instance Report

on:
  workflow_dispatch:


jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get update

      - name: AWS Credentials Configuration
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: 'ap-south-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: connecting to EC2
        uses: appleboy/ssh-action@master     
        with:
          key: ${{ secrets.PRIVATE_KEY }}
          host : ${{ secrets.HOST }}
          username : ${{ secrets.USER_NAME }}
          port : 22 
          script: |
            hostname -i
            ps aux 

      - name: Commands for EC2
        run: 
          echo "Hello, world!"
       
      - name: Generate report
        shell: bash
        run: |
          chmod 777 report.sh
          ./report.sh > instance_data.txt

          
    
      - name: upload-artifacts
        uses: actions/upload-artifact@v3
        with:
          name: instance_details
          path: instance_data.txt
      
      - name: download output file
        uses: actions/download-artifact@v3
        with:
          name: instance_details

   
      
           #chmod 777 report.sh && aws ec2 describe-instances --filters 'Name=instance-state-name,Values=stopped' --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value | [0],InstanceId:InstanceId}' --output table 
          #aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value | [0],InstanceId:InstanceId}' --output table >> instance_data.txt
          # aws cloudwatch get-metric-statistics --namespace AWS/EC2 --metric-name CPUUtilization  --period 3600 \
          # --statistics Maximum --dimensions Name=InstanceId,Value=i-06474f0e051d3c623 \
          # --start-time 2023-03-18T23:18:00 --end-time 2023-03-19T23:22:00 >> instance_data.txt
          # aws ec2 describe-instances --instance-ids i-06474f0e051d3c623 --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,MemoryInfo]' --output text >> instance_data.txt
          # aws ec2 describe-instance-types --instance-types t2.micro --query 'InstanceTypes[*].[MemoryInfo.SizeInMiB, MemoryInfo.SpeedMHz, MemoryInfo.Type]' --output text >> instance_data.txt
          # aws ec2 describe-instances --instance-ids i-036e1249186882ece --query 'Reservations[*].Instances[*].InstanceType' --output text | xargs -I {} aws ec2 describe-instance-types --instance-types {} --query 'InstanceTypes[*].[MemoryInfo.SizeInMiB, MemoryInfo.SpeedMHz, MemoryInfo.Type]' --output text >> instance_data.txt
      


      #      chmod 777 report.sh && aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' --query 'Reservations[].Instances[].{Name:Tags[?Key==`Name`].Value | [0],InstanceId:InstanceId}' --output table
      #     ./report.sh
      #      
      #      aws ec2 describe-instances --instance-ids i-06474f0e051d3c623 --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,MemoryInfo]' --output text
      #      aws ec2 describe-instance-types --instance-types t2.micro --query 'InstanceTypes[*].[MemoryInfo.SizeInMiB, MemoryInfo.SpeedMHz, MemoryInfo.Type]' --output text
      #      aws ec2 describe-instances --instance-ids i-036e1249186882ece --query 'Reservations[*].Instances[*].InstanceType' --output text | xargs -I {} aws ec2 describe-instance-types --instance-types {} --query 'InstanceTypes[*].[MemoryInfo.SizeInMiB, MemoryInfo.SpeedMHz, MemoryInfo.Type]' --output text
      
      
        # - name: server os
        # run: 
        #   uname -a
           
      # - name: List running processes
      #   run: |
      #     aws ssm start-session --target  i-06474f0e051d3c623 | uname -a





      #'yum list installed | wc -l'
      # aws ec2 describe-instances --instance-ids --query "Reservations[*].Instances[*].RunningProcesses[].ProcessName" --output text | wc -l
     
      

      #  Process to increase memory through aws cli in github actions
      #  - name: Increase EC2 instance memory
      #    run: 
      #       aws ec2 modify-instance-attribute --instance-id <instance-id> --attribute memory.value --value <memory-value>
        
        #  Process to increase storage through aws cli in github actions
        #  - name: Increase EBS volume size
        #    run: 
        #       aws ec2 modify-volume --volume-id <volume-id> --size <new-size>
        
        #For optimize the instance
        #aws ec2 modify-instance-attribute --instance-id <instance-id> --instance-type <optimized-instance-type>
        #ssh ec2-user@"public-ip"'yum list installed | wc -l'
         #ssh ec2-user@43.205.139.81 'yum list installed | wc -l'
         #ssh ec2-user@"$public_ip" 'ps aux | wc -l'
         #ssh -i ec2-user@43.205.139.81
          # name: List running processes
          #  run: |
          # INSTANCE_ID=<your-instance-id>
          # PROCESS_INFO=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp' --output text | xargs ssh ec2-user@)
          # echo "$PROCESS_INFO"

          # - name: Deploy to AWS EC2 instance
          #   uses: appleboy/ssh-action@master
          #   with:
          #     host: ${{ secrets.HOST }}
          #     username: ${{ secrets.USER_NAME }}
          #     key: ${{ secrets.PRIVATE_KEY }}
              # script: |
              #   echo "Hello, world!"
          
          # run: 
          # echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          # ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          # echo ${{ secrets.PRIVATE_KEY }} > private_key && chmod 600 private_key
          # ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.USER_NAME }}@$${{ secrets.HOST }}
          # status=$(aws ec2 describe-instance-status --region ap-south-1 --instance-ids i-06474f0e051d3c623 --query 'InstanceStatuses[0].InstanceStatus.Details[?StatusName=='httpd'].Status' --output text)
          #   echo $status